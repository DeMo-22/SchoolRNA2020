```{r, eval=F}
library(Seurat)
mkdir data
curl -o data/pbmc_1k_v2_filtered_feature_bc_matrix.h5 -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.h5
curl -o data/pbmc_1k_v3_filtered_feature_bc_matrix.h5 -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.h5
curl -o data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5 -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
v2.1k <- Read10X_h5("data/pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- Read10X_h5("data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5", use.names = T)
## Genome matrix has multiple modalities, returning a list of matrices for this genome
p3.1k <- p3.1k$`Gene Expression`
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
library(Seurat)
library(Matrix)
library(hdf5r)
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
v2.1k <- Read10X_h5("data/pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- Read10X_h5("data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5", use.names = T)
## Genome matrix has multiple modalities, returning a list of matrices for this genome
p3.1k <- p3.1k$`Gene Expression`
SeuratObject.v2.1k <- CreateSeuratObject(v2.1k, project = "v2.1k")
SeuratObject.v3.1k <- CreateSeuratObject(v3.1k, project = "v3.1k")
SeuratObject.p3.1k <- CreateSeuratObject(p3.1k, project = "p3.1k")
SeuratObject <- merge(SeuratObject.v2.1k,
c(SeuratObject.v3.1k,SeuratObject.p3.1k),
add.cell.ids=c("v2.1k","v3.1k","p3.1k"))
SeuratObject$Chemistry <- ifelse(SeuratObject$orig.ident == "v2.1k","v2","v3")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_mito"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Calculating % mitochondrial genes
SeuratObject <- PercentageFeatureSet(SeuratObject,
pattern = "^MT-",
col.name = "percent_mito")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_mito"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Filter
selected_mito <- WhichCells(SeuratObject,
expression = percent_mito < 0.25)
SeuratObject <- subset(SeuratObject,
cells = selected_mito)
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_mito"),
pt.size = 0.1,
ncol = 4) + NoLegend()
SeuratObject <- merge(SeuratObject.v2.1k,
c(SeuratObject.v3.1k,SeuratObject.p3.1k),
add.cell.ids=c("v2.1k","v3.1k","p3.1k"))
SeuratObject$Chemistry <- ifelse(SeuratObject$orig.ident == "v2.1k","v2","v3")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Calculating % mitochondrial genes
SeuratObject <- PercentageFeatureSet(SeuratObject,
pattern = "^MT-",
col.name = "percent_mito")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_mito"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Calculating % ribossomal genes
SeuratObject <- PercentageFeatureSet(SeuratObject,
pattern = "^RP[SL]",
col.name = "percent_ribo")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
boxplot(t(SeuratObject@assays$RNA@counts[1:30,]))
boxplot(Matrix::t(SeuratObject@assays$RNA@counts[1:30,]))
Matrix::t(SeuratObject@assays$RNA@counts[1:30,])
boxplot(as.matrix(Matrix::t(SeuratObject@assays$RNA@counts[1:30,])))
library(biomaRt)
mart = useMart("ensembl",
dataset = paste0("hsapiens_gene_ensembl"),
host="jul2019.archive.ensembl.org")
annot <- getBM(c("external_gene_name",
"gene_biotype",
"chromosome_name"),
mart = mart)
sel <- annot[match(rownames(SeuratObject) , annot[,1]),2] == "protein_coding"
genes_use <- rownames(SeuratObject)[sel]
genes_use <- as.character(na.omit(genes_use))
genes_use
SeuratObject <- SeuratObject[genes_use,]
dim(SeuratObject)
library(pheatmap)
# Chunk 1
library(Seurat)
library(Matrix)
library(hdf5r)
# Chunk 2
mkdir data
curl -o data/pbmc_1k_v2_filtered_feature_bc_matrix.h5 -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.h5
curl -o data/pbmc_1k_v3_filtered_feature_bc_matrix.h5 -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.h5
curl -o data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5 -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5
# Chunk 3
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
v2.1k <- Read10X_h5("data/pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- Read10X_h5("data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5", use.names = T)
## Genome matrix has multiple modalities, returning a list of matrices for this genome
p3.1k <- p3.1k$`Gene Expression`
# Chunk 4
SeuratObject.v2.1k <- CreateSeuratObject(v2.1k, project = "v2.1k")
SeuratObject.v3.1k <- CreateSeuratObject(v3.1k, project = "v3.1k")
SeuratObject.p3.1k <- CreateSeuratObject(p3.1k, project = "p3.1k")
# Chunk 5
SeuratObject <- merge(SeuratObject.v2.1k,
c(SeuratObject.v3.1k,SeuratObject.p3.1k),
add.cell.ids=c("v2.1k","v3.1k","p3.1k"))
dim(SeuratObject)
# Chunk 6
SeuratObject$Chemistry <- ifelse(SeuratObject$orig.ident == "v2.1k","v2","v3")
# Chunk 7
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Chunk 8
# Calculating % mitochondrial genes
SeuratObject <- PercentageFeatureSet(SeuratObject,
pattern = "^MT-",
col.name = "percent_mito")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_mito"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Chunk 9
# Calculating % ribossomal genes
SeuratObject <- PercentageFeatureSet(SeuratObject,
pattern = "^RP[SL]",
col.name = "percent_ribo")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# Calculating % mitochondrial genes
SeuratObject <- PercentageFeatureSet(SeuratObject,
pattern = "^MT-",
col.name = "percent_mito")
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_mito"),
pt.size = 0.1,
ncol = 4,y.max = 100) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("percent_ribo"),
pt.size = 0.1,
ncol = 4,y.max = 100) + NoLegend()
#Compute the relative expression of each gene per cell
rel_expression <- t( t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(SeuratObject)
par(mfrow=c(1,2),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
par(mfrow=c(1,1),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
par(mfrow=c(1,2),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
par(mfrow=c(1,2),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE,label.cex=.7)
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE,cex.label=.7)
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE,xlim=c(0,20))
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[90:61],horizontal=TRUE)
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),z]
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = T)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=hue_pal()(100))
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100))
temp
item
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horiz=T)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
par(mfrow=c(1,2),mar=c(4,15,1,1))
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
par(mfrow=c(1,2),mar=c(4,10,1,1))
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
par(mfrow=c(1,2),mar=c(4,6,1,1))
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"chromosome_name"]
item
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item[! item %in% as.character(c(1:23,"X","Y","MT")) ] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
o <- sort(rownames(temp))
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
o <- sort(as.numeric(rownames(temp)) )
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
library(biomaRt)
mart = useMart("ensembl",
dataset = paste0("hsapiens_gene_ensembl"),
host="jul2019.archive.ensembl.org")
annot <- getBM(c("external_gene_name",
"gene_biotype",
"chromosome_name"),
mart = mart)
par(mfrow=c(1,3),mar=c(4,6,1,1))
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"chromosome_name"]
item[is.na(item)] <- "unknown"
item[! item %in% as.character(c(1:23,"X","Y","MT")) ] <- "other"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
dim(SeuratObject)
temp[1,]
SeuratObject <- CellCycleScoring(object = SeuratObject,
g2m.features = cc.genes$g2m.genes,
s.features = cc.genes$s.genes)
cc.genes$g2m.genes
cc.genes$s.genes
SeuratObject
dim(SeuratObject)
sel <- annot[match(rownames(SeuratObject) , annot[,1]),2] == "protein_coding"
genes_use <- rownames(SeuratObject)[sel]
genes_use <- as.character(na.omit(genes_use))
SeuratObject <- SeuratObject[genes_use,]
dim(SeuratObject)
SeuratObject
SeuratObject <- CellCycleScoring(object = SeuratObject,
g2m.features = cc.genes$g2m.genes,
s.features = cc.genes$s.genes)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1)
SeuratObject$G1.Score <- 100 - SeuratObject$G1.Score - SeuratObject$G2M.Score
SeuratObject$G1.Score <- 100 - SeuratObject$S.Score - SeuratObject$G2M.Score
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,
y.max = 100,
)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,
y.max = 100)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,
y.max = 100,same.y.lims = T)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,same.y.lims = T)
SeuratObject$G1.Score <- 1 - SeuratObject$S.Score - SeuratObject$G2M.Score
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,same.y.lims = T)
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
#Compute the relative expression of each gene per cell
rel_expression <- t( t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[90:61],horizontal=TRUE)
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# remove cells with abnormal mitochodrial and ribossomal gene percentages
selected_ribo <- WhichCells(SeuratObject,
expression = percent_mito < 25)
selected_ribo <- WhichCells(SeuratObject,
expression = percent_ribo > 5)
selected_ribo
selected_ribo
#start with cells with many genes detected.
high.det.v3 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 4100)
high.det.v2 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 2000 &
orig.ident == "v2.1k")
SeuratObject.filt <- subset(
SeuratObject,
cells=setdiff(
WhichCells(SeuratObject),
c(high.det.v2,high.det.v3))
)
# remove cells with abnormal mitochodrial and ribossomal gene percentages
selected_mito <- WhichCells(
SeuratObject,
expression = percent_mito < 25)
selected_ribo <- WhichCells(
SeuratObject,
expression = percent_ribo > 5)
SeuratObject.filt <- subset(
SeuratObject.filt,
cells = selected_ribo [selected_ribo %in% selected_mito ])
#start with cells with many genes detected.
high.det.v3 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 4100)
high.det.v2 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 2000 &
orig.ident == "v2.1k")
SeuratObject.filt <- subset(
SeuratObject,
cells=setdiff(
WhichCells(SeuratObject),
c(high.det.v2,high.det.v3))
)
# remove cells with abnormal mitochodrial and ribossomal gene percentages
selected_mito <- WhichCells(
SeuratObject.filt,
expression = percent_mito < 25)
selected_ribo <- WhichCells(
SeuratObject.filt,
expression = percent_ribo > 5)
SeuratObject.filt <- subset(
SeuratObject.filt,
cells = selected_ribo [selected_ribo %in% selected_mito ])
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4,y.max = 100) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4,y.max = 100) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
SeuratObject
SeuratObject@version
data <- read.csv("~/Downloads/5829687/FACS/Large_Intestine-counts.csv")
dim(data)
rownames(data)
data[1,]
colnames(data)
data[2,]
rm(data)
data <- read.csv("~/Downloads/5829687/FACS/Large_Intestine-counts.csv",row.names = 1)
dim(data)
rownames(data)
library(hdf5r)
h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5",)
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5",)
file.h5["expression", "data"] <- data
file.h5 <- createGroup(file.h5, name = "expression")
file.h5
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
expression.grp <- file.h5$create_group("expression")
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
expression.grp <- file.h5$create_group("expression")
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
file.h5 <- createGroup(file.h5,"expression")
file.h5
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
file.h5 <- createGroup(object = file.h5, name = "expression")
file.h5
file.h5[["expression"]]
file.h5 <-createDataSet(file.h5,"expression",x=data)
iinstall.packages("H5")
install.packages("H5")
install.packages("HDF5")
install.packages("h5")
BiocManager::install("rhdf5")
BiocManager::install("rhdf5")
