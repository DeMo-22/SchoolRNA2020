h5write(rep("expression",nrow(data))
,"~/Downloads/Marrow.h5","matrix/features/feature_type")
h5write(rep("mm10",nrow(data))
,"~/Downloads/Marrow.h5","matrix/features/genome")
h5ls("~/Downloads/Marrow.h5")
nd <- Seurat::Read10X_h5("~/Downloads/Marrow.h5")
sum(!nd == data)
library(Seurat)
#Removing Features
readRDS('~/Dropbox/Flu scRNA manuscript/Figures/data_for_figures.rds')
#Removing Features
SeuratObject <- readRDS('~/Dropbox/Flu scRNA manuscript/Figures/data_for_figures.rds')
SeuratObject
library(biomaRt)
mart = useMart("ensembl",
dataset = paste0("hsapiens_gene_ensembl"),
host="jul2019.archive.ensembl.org")
annot <- getBM(c("external_gene_name",
"gene_biotype",
"chromosome_name"),
mart = mart)
par(mfrow=c(1,2),mar=c(4,6,1,1))
# Plot expression per gene_biotype
item <- annot[match(rownames(SeuratObject) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject),group=item)
# Plot expression per gene_biotype
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
temp
temp[1:10,]
temp[1:10]
dim(temp)
# Plot expression per gene_biotype
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item
listDatasets(mart)
listDatasets(mart)[,"dataset"]
biomaRt::listEnsemblArchives()
library(biomaRt)
# Retrive mouse gene annotation from ENSEMBL
mart = biomaRt::useMart(
biomart = "ensembl",
dataset = "mmusculus_gene_ensembl",
host = "apr2020.archive.ensembl.org")
# Retrive the selected attributes mouse gene annotation
annot <- biomaRt::getBM(
attributes = c(
"external_gene_name",
"gene_biotype",
"chromosome_name"),
mart = mart)
# Plot expression per gene_biotype
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item
# Plot expression per gene_biotype
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item
# Calculate the percentage of each gene biotype
perc <- rowsum(as.matrix(SeuratObject@assays$RNA@counts) , group=item)
# Match the gene names with theit respective gene biotype
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
# Calculate the percentage of each gene biotype
perc <- rowsum(as.matrix(SeuratObject@assays$RNA@counts) , group=item)
perc <- (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))
perc
# Add table to the object
gene_biotype_table <- setNames(as.data.frame(((t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100)[,names(sort(table(item),decreasing = T))]),paste0("percent_",names(sort(table(item),decreasing = T))))
gene_biotype_table
!(colnames(SeuratObject@meta.data) %in% colnames(gene_biotype_table))
# Add table to the object
gene_biotype_table <- setNames(as.data.frame(perc*100)[,names(sort(table(item),decreasing = T))]),paste0("percent_",names(sort(table(item),decreasing = T))))
# Calculate the percentage of each gene biotype
perc <- rowsum(as.matrix(SeuratObject@assays$RNA@counts) , group=item)
perc <- (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))
o <- order(apply(perc,1,median),decreasing = F)
perc <- perc[,o]
perc
perc <- rowsum(as.matrix(SeuratObject@assays$RNA@counts) , group=item)
perc <- (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))
o <- order(apply(perc,1,median),decreasing = F)
perc <- perc[,o]
# Add table to the object
gene_biotype_table <- setNames(as.data.frame((perc*100)[,names(sort(table(item),decreasing = T))]),paste0("percent_",names(sort(table(item),decreasing = T))))
o <- order(apply(perc,2,median),decreasing = F)
perc <- rowsum(as.matrix(SeuratObject@assays$RNA@counts) , group=item)
perc <- (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))
o <- order(apply(perc,2,median),decreasing = F)
perc <- perc[,o]
perc
boxplot( perc*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
SeuratObject@meta.data[,grep("perc",colnames(SeuratObject@meta.data))]
PC <- prcomp( SeuratObject@meta.data[,grep("perc",colnames(SeuratObject@meta.data))] ,center = T, scale. = T)
plot(PC$x[,1],PC$x[,2])
plot(PC$x[,1],PC$x[,2],pch=.1)
plot(PC$x[,1],PC$x[,2],cex=.1)
plot(PC$x[,1],PC$x[,2],cex=.01)
plot(PC$x[,3],PC$x[,4],cex=.01)
metadata_use <- grep("perc",colnames(SeuratObject@meta.data))
metadata_use <- c("percent_mito","percent_ribo","S.Score","G2M.Score",metadata_use)
PC <- prcomp( SeuratObject@meta.data[,metadata_use] ,center = T, scale. = T)
plot(PC$x[,3],PC$x[,4],cex=.01)
metadata_use <- grep("perc",colnames(SeuratObject@meta.data))
metadata_use <- grep("perc",colnames(SeuratObject@meta.data),value = T)
metadata_use <- c("percent_mito","percent_ribo","S.Score","G2M.Score",metadata_use)
PC <- prcomp( SeuratObject@meta.data[,metadata_use] ,center = T, scale. = T)
metadata_use <- grep("perc",colnames(SeuratObject@meta.data),value = T)
metadata_use
metadata_use <- c("percent_mito","percent_ribo","S.Score","G2M.Score",metadata_use)
metadata_use
colnames(SeuratObject@meta.data)
metadata_use <- grep("perc",colnames(SeuratObject@meta.data),value = T)
metadata_use <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score",metadata_use)
PC <- prcomp( SeuratObject@meta.data[,metadata_use] ,center = T, scale. = T)
plot(PC$x[,3],PC$x[,4],cex=.01)
plot(PC$x[,1],PC$x[,2],cex=.01)
PC$x
DimPlot(SeuratObject,
dims = c(1,2),
group.by = "batch" )
# Calculate PCA using selected metadata parameters
metadata_use <- grep("perc",colnames(SeuratObject@meta.data),value = T)
metadata_use <- c("nCount_RNA","nFeature_RNA","S.Score","G2M.Score",metadata_use)
PC <- prcomp( SeuratObject@meta.data[,metadata_use] ,center = T, scale. = T)
# Add the PCA (ran on the METADATA) in the object
SeuratObject@reductions[["pca_metadata"]] <- CreateDimReducObject(
embeddings = PC$x,
key = "PC_metadata_",
assay = "RNA")
# Plot the PCA ran on the METADATA
DimPlot(SeuratObject,
reduction = "pca_metadata",
dims = c(1,2),
group.by = "batch" )
# Plot the PCA ran on the METADATA
DimPlot(SeuratObject,
reduction = "pca_metadata",
dims = c(1,2),
group.by = "orig.ident" )
# Add the PCA (ran on the METADATA) in the object
SeuratObject@reductions[["pca_metadata"]] <- CreateDimReducObject(
embeddings = PC$x,
key = "metadataPC_",
assay = "RNA")
# Plot the PCA ran on the METADATA
DimPlot(SeuratObject,
reduction = "pca_metadata",
dims = c(1,2),
group.by = "orig.ident" )
#Compute the relative expression of each gene per cell
rel_expression <- t( t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
#Plot the relative expression of each gene per cell
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[90:61],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
SeuratObject@assays$RNA@counts
#Compute the relative expression of each gene per cell
rel_expression <- Matrix::t( Matrix::t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
#Compute the relative expression of each gene per cell
rel_expression <- Matrix::t( Matrix::t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
#Plot the relative expression of each gene per cell
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[90:61],horizontal=TRUE)
rel_expression
#Plot the relative expression of each gene per cell
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- Matrix::t( Matrix::t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
#Plot the relative expression of each gene per cell
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[90:61],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- Matrix::t( Matrix::t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
#Plot the relative expression of each gene per cell
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[30:1],horizontal=TRUE)
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[60:31],horizontal=TRUE)
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[90:61],horizontal=TRUE)
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[30:1],horizontal=TRUE,xlim=c(0,8))
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[30:1],horizontal=TRUE,ylim=c(0,8))
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[60:31],horizontal=TRUE,ylim=c(0,8))
boxplot( as.matrix(Matrix::t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(90)[90:61],horizontal=TRUE,ylim=c(0,8))
SeuratObject@reductions$pca@cell.embeddings
h <- hclust(as.dist(DATA@graphs$SNN) ,method = "ward.D2")
h <- hclust(as.dist(SeuratObject@graphs$SNN) ,method = "ward.D2")
SeuratObject$HC_test <- cutree(h,k = 20)
source("~/repos/niceRplots/R/plotting_functions.R")
source("~/repos/niceRplots/R/helper_functions.R")
plot_meta(SeuratObject,"umap","HC_test",label = T)
h <- hclust(1-as.dist(SeuratObject@graphs$SNN) ,method = "ward.D2")
SeuratObject$HC_test <- cutree(h,k = 20)
plot_meta(SeuratObject,"umap","HC_test",label = T)
mypar()
rafalib::mypar()
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h,k = 14)
plot_meta(SeuratObject,"umap","HC_test",label = T)
max(as.dist(SeuratObject@graphs$SNN))
h <- hclust( 1.01 - as.dist(SeuratObject@graphs$SNN) ,method = "ward.D2")
SeuratObject$HC_test <- cutree(h, k = 11)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 14)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 20)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 25)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 22)
plot_meta(SeuratObject,"umap","HC_test",label = T)
h <- hclust( 1.01 - as.dist(SeuratObject@graphs$SNN) ,method = "complete")
SeuratObject$HC_test <- cutree(h, k = 22)
plot_meta(SeuratObject,"umap","HC_test",label = T)
h <- hclust( 1.01 - as.dist(SeuratObject@graphs$SNN) ,method = "average")
SeuratObject$HC_test <- cutree(h, k = 22)
plot_meta(SeuratObject,"umap","HC_test",label = T)
h <- hclust( 1.01 - as.dist(SeuratObject@graphs$SNN) ,method = "single")
SeuratObject$HC_test <- cutree(h, k = 22)
plot_meta(SeuratObject,"umap","HC_test",label = T)
h <- hclust( 1.01 - as.dist(SeuratObject@graphs$SNN) ,method = "ward.D2")
SeuratObject$HC_test <- cutree(h, k = 22)
plot_meta(SeuratObject,"umap","HC_test",label = T)
# Running on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D2")
SeuratObject$HC_test <- cutree(h, k = 22)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 15)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 20)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 18)
plot_meta(SeuratObject,"umap","HC_test",label = T)
# Running on a graph
h <- hclust(
1.000001 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D2")
SeuratObject$HC_test <- cutree(h, k = 18)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 20)
plot_meta(SeuratObject,"umap","HC_test",label = T)
# Running on a graph
h <- hclust(
1.1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D2")
SeuratObject$HC_test <- cutree(h, k = 20)
plot_meta(SeuratObject,"umap","HC_test",label = T)
SeuratObject$HC_test <- cutree(h, k = 18)
plot_meta(SeuratObject,"umap","HC_test",label = T)
# Running on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D2")
SeuratObject$HC_test <- cutree(h, k = 18)
plot_meta(SeuratObject,"umap","HC_test",label = T)
h$height
max(h$height)
# Cutting the tree based on a number of clusters
SeuratObject$HC_res <- cutree(
tree = h,
h = 1)
plot_meta(SeuratObject,"umap","HC_test",label = T)
# Cutting the tree based on a number of clusters
SeuratObject$HC_res <- cutree(
tree = h,
h = 2)
plot_meta(SeuratObject,"umap","HC_test",label = T)
# Cutting the tree based on a number of clusters
SeuratObject$HC_res <- cutree(
tree = h,
h = .2)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Cutting the tree based on a number of clusters
SeuratObject$HC_res <- cutree(
tree = h,
h = 1)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Cutting the tree based on a number of clusters
SeuratObject$HC_res <- cutree(
tree = h,
h = 3)
plot_meta(SeuratObject,"umap","HC_res",label = T)
plot(h)
plot(as.dedrogram(h),
labels = F,type = "s")
plot(as.dendrogram(h),
labels = F,type = "s")
plot(as.dendrogram(h),
labels = F)
# Running HC on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "centroid")
# Cutting the tree based on a height
SeuratObject$HC_res <- cutree(
tree = h,
k = 18)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Running HC on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D2")
# Cutting the tree based on a height
SeuratObject$HC_res <- cutree(
tree = h,
k = 18)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Running HC on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D")
# Cutting the tree based on a height
SeuratObject$HC_res <- cutree(
tree = h,
k = 18)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Running HC on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D")
# Cutting the tree based on a height
SeuratObject$HC_res <- cutree(
tree = h,
k = 18)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Running HC on a graph
h <- hclust(
1 - as.dist(SeuratObject@graphs$SNN) ,
method = "median")
# Cutting the tree based on a height
SeuratObject$HC_res <- cutree(
tree = h,
k = 18)
plot_meta(SeuratObject,"umap","HC_res",label = T)
# Running HC on a graph
h <- hclust(
d = 1 - as.dist(SeuratObject@graphs$SNN) ,
method = "ward.D2",)
# Cutting the tree based on a height
SeuratObject$HC_res <- cutree(
tree = h,
k = 18)
table(SeuratObject$HC_res)
plot_meta(SeuratObject,"umap","HC_res",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:30 ],
centers = 15,
iter.max = 30,
nstart = 100)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = 1 - SeuratObject@graphs$SNN,
centers = 12,
iter.max = 30,
nstart = 100)$cluster
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:30 ],
centers = 15,
iter.max = 10,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:30 ],
centers = 10,
iter.max = 10,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:30 ],
centers = 11,
iter.max = 10,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = 1 - SeuratObject@graphs$SNN,
centers = 12,
iter.max = 10,
nstart = 10)$cluster
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 15,
iter.max = 30,
nstart = 30)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 15,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 10,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 15,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 50)$cluster
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 50)$cluster
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
set.seed(1)
SeuratObject$kmeans_15 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 10)$cluster
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
plot_meta(SeuratObject,"umap","kmeans_15",label = T)
SeuratObject$kmeans_12 <- kmeans(
x = SeuratObject@reductions[["pca"]]@cell.embeddings [ , 1:50 ],
centers = 12,
iter.max = 50,
nstart = 10)$cluster
SeuratObject@assays$RNA@meta.features
devtools::install_github('satijalab/seurat-wrappers')
devtools::install_github("immunogenomics/harmony")
devtools::install_github('MacoskoLab/liger')
options(buildtools.check = function(action) TRUE)
devtools::install_github('MacoskoLab/liger')
devtools::install_github("immunogenomics/harmony")
PATH
devtools::find_rtools()
reticulate::py_config()
reticulate::py_module_available("umap")
reticulate::py_module_available("nljsadgaldg")
.libPaths()
devtools::install_github("immunogenomics/harmony")
options(buildtools.check = function(action) F)
devtools::install_github("immunogenomics/harmony")
pkgbuild::check_build_tools(debug = TRUE)
devtools::check_built()
devtools::find_rtools()
devtools::find_rtools(debug = T)
install.packages("harmony")
SeuratWrappers::RunFastMNN()
library(reticulate)
py_available()
py_module_available("umap-learn")
py_module_available(umap-learn)
py_module_available('umap-learn')
py_config()
Sys.which("python")
py_install("scanorama", pip = TRUE)
library(reticulate)
py_module_available("umap-learn")
py_module_available("umap")
py_module_available("leidenalg")
py_module_available("scanorama")
scanorama <- import("scanorama")
library(tradeSeq)
library(Seurat)
library(Seurat)
enrichr
library(limma)
library(Seurat)
UMAPPlot
library(Seurat)
