item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
par(mfrow=c(1,2),mar=c(4,6,1,1))
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"chromosome_name"]
item
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item[! item %in% as.character(c(1:23,"X","Y","MT")) ] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
o <- sort(rownames(temp))
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
o <- sort(as.numeric(rownames(temp)) )
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
library(biomaRt)
mart = useMart("ensembl",
dataset = paste0("hsapiens_gene_ensembl"),
host="jul2019.archive.ensembl.org")
annot <- getBM(c("external_gene_name",
"gene_biotype",
"chromosome_name"),
mart = mart)
par(mfrow=c(1,3),mar=c(4,6,1,1))
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"gene_biotype"]
item[is.na(item)] <- "unknown"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
item <- annot[match(rownames(SeuratObject@assays$RNA@counts) , annot[,1]),"chromosome_name"]
item[is.na(item)] <- "unknown"
item[! item %in% as.character(c(1:23,"X","Y","MT")) ] <- "other"
temp <- rowsum(as.matrix(SeuratObject@assays$RNA@counts),group=item)
o <- order(apply(temp,1,median),decreasing = F)
boxplot( (t(temp)/Matrix::colSums(SeuratObject@assays$RNA@counts))[,o]*100,outline=F,las=2,main="% reads per cell",col=scales::hue_pal()(100),horizontal=T)
dim(SeuratObject)
temp[1,]
SeuratObject <- CellCycleScoring(object = SeuratObject,
g2m.features = cc.genes$g2m.genes,
s.features = cc.genes$s.genes)
cc.genes$g2m.genes
cc.genes$s.genes
SeuratObject
dim(SeuratObject)
sel <- annot[match(rownames(SeuratObject) , annot[,1]),2] == "protein_coding"
genes_use <- rownames(SeuratObject)[sel]
genes_use <- as.character(na.omit(genes_use))
SeuratObject <- SeuratObject[genes_use,]
dim(SeuratObject)
SeuratObject
SeuratObject <- CellCycleScoring(object = SeuratObject,
g2m.features = cc.genes$g2m.genes,
s.features = cc.genes$s.genes)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1)
SeuratObject$G1.Score <- 100 - SeuratObject$G1.Score - SeuratObject$G2M.Score
SeuratObject$G1.Score <- 100 - SeuratObject$S.Score - SeuratObject$G2M.Score
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,
y.max = 100,
)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,
y.max = 100)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,
y.max = 100,same.y.lims = T)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1)
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,same.y.lims = T)
SeuratObject$G1.Score <- 1 - SeuratObject$S.Score - SeuratObject$G2M.Score
VlnPlot(SeuratObject,
features = c("S.Score","G2M.Score","G1.Score"),
group.by= "orig.ident",
ncol = 4,
pt.size = .1,same.y.lims = T)
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
#Compute the relative expression of each gene per cell
rel_expression <- t( t(SeuratObject@assays$RNA@counts) / Matrix::colSums(SeuratObject@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T) / ncol(SeuratObject)
par(mfrow=c(1,3),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed[30:1]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[30:1],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[60:31]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[60:31],horizontal=TRUE)
boxplot( as.matrix(t(rel_expression[names(most_expressed[90:61]),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[90:61],horizontal=TRUE)
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA"),
pt.size = 0.1,
ncol = 4) + NoLegend()
# remove cells with abnormal mitochodrial and ribossomal gene percentages
selected_ribo <- WhichCells(SeuratObject,
expression = percent_mito < 25)
selected_ribo <- WhichCells(SeuratObject,
expression = percent_ribo > 5)
selected_ribo
selected_ribo
#start with cells with many genes detected.
high.det.v3 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 4100)
high.det.v2 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 2000 &
orig.ident == "v2.1k")
SeuratObject.filt <- subset(
SeuratObject,
cells=setdiff(
WhichCells(SeuratObject),
c(high.det.v2,high.det.v3))
)
# remove cells with abnormal mitochodrial and ribossomal gene percentages
selected_mito <- WhichCells(
SeuratObject,
expression = percent_mito < 25)
selected_ribo <- WhichCells(
SeuratObject,
expression = percent_ribo > 5)
SeuratObject.filt <- subset(
SeuratObject.filt,
cells = selected_ribo [selected_ribo %in% selected_mito ])
#start with cells with many genes detected.
high.det.v3 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 4100)
high.det.v2 <- WhichCells(
SeuratObject,
expression = nFeature_RNA > 2000 &
orig.ident == "v2.1k")
SeuratObject.filt <- subset(
SeuratObject,
cells=setdiff(
WhichCells(SeuratObject),
c(high.det.v2,high.det.v3))
)
# remove cells with abnormal mitochodrial and ribossomal gene percentages
selected_mito <- WhichCells(
SeuratObject.filt,
expression = percent_mito < 25)
selected_ribo <- WhichCells(
SeuratObject.filt,
expression = percent_ribo > 5)
SeuratObject.filt <- subset(
SeuratObject.filt,
cells = selected_ribo [selected_ribo %in% selected_mito ])
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4,y.max = 100) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4,y.max = 100) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nUMI","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
VlnPlot(SeuratObject.filt,
group.by= "orig.ident",
features = c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo"),
pt.size = 0.1,
ncol = 4) + NoLegend()
SeuratObject
SeuratObject@version
data <- read.csv("~/Downloads/5829687/FACS/Large_Intestine-counts.csv")
dim(data)
rownames(data)
data[1,]
colnames(data)
data[2,]
rm(data)
data <- read.csv("~/Downloads/5829687/FACS/Large_Intestine-counts.csv",row.names = 1)
dim(data)
rownames(data)
library(hdf5r)
h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5",)
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5",)
file.h5["expression", "data"] <- data
file.h5 <- createGroup(file.h5, name = "expression")
file.h5
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
expression.grp <- file.h5$create_group("expression")
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
expression.grp <- file.h5$create_group("expression")
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
file.h5 <- createGroup(file.h5,"expression")
file.h5
file.h5 <- h5file(filename = "~/Downloads/5829687/FACS/Large_Intestine.h5")
file.h5 <- createGroup(object = file.h5, name = "expression")
file.h5
file.h5[["expression"]]
file.h5 <-createDataSet(file.h5,"expression",x=data)
iinstall.packages("H5")
install.packages("H5")
install.packages("HDF5")
install.packages("h5")
BiocManager::install("rhdf5")
BiocManager::install("rhdf5")
library(rhdf5)
data <- read.csv("~/Downloads/5829687/FACS/Large_Intestine-counts.csv",row.names = 1)
h5createFile("~/Downloads/5829687/FACS/Large_Intestine.h5")
h5createFile("~/Downloads/5829687/FACS/Large_Intestine.h5")
data <- Matrix::Matrix(data,sparse = T)
data <- Matrix::Matrix(as.matrix(data), sparse = T)
data
data@Dim
h5write(data, "myhdf5file.h5","matrix",write.attributes=TRUE)
data
data@i
data@Dimnames
data@Dimnames[[1]]
data@x
h5createGroup("~/Downloads/5829687/FACS/Large_Intestine.h5","matrix")
h5write(data@Dimnames[[2]],"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/barcodes")
h5write(data@x,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/data")
h5write(data@i,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/indices")
h5write(data@p,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/indptr")
h5write(data@Dim,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/shape")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/name")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/_all_tag_keys")
h5createFile("~/Downloads/5829687/FACS/Large_Intestine.h5")
h5createGroup("~/Downloads/5829687/FACS/Large_Intestine.h5","matrix")
h5write(data@Dimnames[[2]],"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/barcodes")
h5write(data@x,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/data")
h5write(data@i,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/indices")
h5write(data@p,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/indptr")
h5write(data@Dim,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/shape")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/name")
h5createGroup("~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/name")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/_all_tag_keys")
h5ls("~/Downloads/5829687/FACS/Large_Intestine.h5")
nd <- Seurat::Read10X_h5("~/Downloads/5829687/FACS/Large_Intestine.h5")
h5write(rep("expression",nrow(data))
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/_all_tag_keys")
h5createFile("~/Downloads/5829687/FACS/Large_Intestine.h5")
h5createGroup("~/Downloads/5829687/FACS/Large_Intestine.h5","matrix")
h5write(data@Dimnames[[2]],"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/barcodes")
h5write(data@x,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/data")
h5write(data@i,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/indices")
h5write(data@p,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/indptr")
h5write(data@Dim,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/shape")
h5createGroup("~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/name")
h5write(data@Dimnames[[1]]
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/_all_tag_keys")
h5write(rep("expression",nrow(data))
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/feature_type")
h5write(rep("mm10",nrow(data))
,"~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features/genome")
h5ls("~/Downloads/5829687/FACS/Large_Intestine.h5")
nd <- Seurat::Read10X_h5("~/Downloads/5829687/FACS/Large_Intestine.h5")
nd
nd == data
sum(!nd == data)
h5createGroup("~/Downloads/5829687/FACS/Large_Intestine.h5","matrix/features")
dim(data)
colnames(data)
ncol(data)/384
library(future)
#######
# Parallelization for reading input files from a folder and creating a count matrix
#######
genes <- read.delim(paste0("~/Downloads/Colon/",file),skip = 4,header = F)[,1]
plan(multiprocess, workers=(availableCores()-1) )
#######
# Parallelization for reading input files from a folder and creating a count matrix
#######
genes <- read.delim(paste0("~/Downloads/Colon/A1-MAA000611-3_8_M-1-1.csv"),skip = 4,header = F)[,1]
#######
# Parallelization for reading input files from a folder and creating a count matrix
#######
files <- list.files("~/Downloads/Colon/")
files[2]
files[1]
genes <- read.delim(paste0("~/Downloads/Colon/",files[1]),skip = 4,header = F)[,1]
genes
file_chunk <- cut(as.numeric(factor(files)),breaks = 7)
file_chunk <- lapply( levels(file_chunk) , function(x){ files[file_chunk==x] })
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.delim(paste0("~/Downloads/Colon/",x),skip = 4,header = F)[,4],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
metadata_all <- lapply(f, FUN = value)
metadata_all <- do.call(cbind,metadata_all)
dim(metadata_all)
rownames(metadata_all) <- genes
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.delim(paste0("~/Downloads/Colon/",x),header = F)[,2],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
metadata_all <- lapply(f, FUN = value)
metadata_all <- do.call(cbind,metadata_all)
dim(metadata_all)
rownames(metadata_all) <- genes
genes <- read.delim(paste0("~/Downloads/Colon/",files[1]),header = F)[,1]
genes
read.csv(paste0("~/Downloads/Colon/",files[1]),header = F,row.names = 1)
read.csv(paste0("~/Downloads/Colon/",files[1]),header = F,row.names = 1)[,1]
file_chunk <- cut(as.numeric(factor(files)),breaks = 7)
file_chunk <- lapply( levels(file_chunk) , function(x){ files[file_chunk==x] })
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.csv(paste0("~/Downloads/Colon/",x),header = F,row.names = 1)[,1],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
metadata_all <- lapply(f, FUN = value)
metadata_all <- do.call(cbind,metadata_all)
dim(metadata_all)
rownames(metadata_all) <- genes
4149/384
metadata_all
read.csv(paste0("~/Downloads/Colon/",files[1]),header = F,row.names = 1)
genes <- rownames(read.csv(paste0("~/Downloads/Colon/",files[1]),header = F,row.names = 1))
rownames(metadata_all) <- genes
metadata_all
# data <- read.csv("~/Downloads/Colon.csv",row.names = 1)
# data <- Matrix::Matrix(as.matrix(data), sparse = T)
data <- metadata_all
h5createFile("~/Downloads/Colon.h5")
h5createGroup("~/Downloads/Colon.h5","matrix")
h5write(data@Dimnames[[2]],"~/Downloads/Colon.h5","matrix/barcodes")
h5write(data@x,"~/Downloads/Colon.h5","matrix/data")
h5write(data@i,"~/Downloads/Colon.h5","matrix/indices")
h5write(data@p,"~/Downloads/Colon.h5","matrix/indptr")
h5write(data@Dim,"~/Downloads/Colon.h5","matrix/shape")
h5createGroup("~/Downloads/Colon.h5","matrix/features")
h5write(data@Dimnames[[1]]
,"~/Downloads/Colon.h5","matrix/features/name")
h5write(data@Dimnames[[1]]
,"~/Downloads/Colon.h5","matrix/features/_all_tag_keys")
h5write(rep("expression",nrow(data))
,"~/Downloads/Colon.h5","matrix/features/feature_type")
h5write(rep("mm10",nrow(data))
,"~/Downloads/Colon.h5","matrix/features/genome")
h5ls("~/Downloads/Colon.h5")
nd <- Seurat::Read10X_h5("~/Downloads/Colon.h5")
sum(!nd == data)
genes <- rownames(read.csv(paste0(PATH,files[1]),header = F,row.names = 1))
dim(data)
library(future)
plan(multiprocess, workers=(availableCores()-1) )
PATH <- "~/Downloads/Marrow/"
#######
# Parallelization for reading input files from a folder and creating a count matrix
#######
files <- list.files(PATH)
genes <- rownames(read.csv(paste0(PATH,files[1]),header = F,row.names = 1))
file_chunk <- cut(as.numeric(factor(files)),breaks = 7)
file_chunk <- lapply( levels(file_chunk) , function(x){ files[file_chunk==x] })
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.csv(paste0(PATH,x),header = F,row.names = 1)[,1],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
#######
# Parallelization for reading input files from a folder and creating a count matrix
#######
files <- list.files(PATH)
genes <- rownames(read.csv(paste0(PATH,files[1]),header = F,row.names = 1))
file_chunk <- cut(as.numeric(factor(files)),breaks = 7)
file_chunk <- lapply( levels(file_chunk) , function(x){ files[file_chunk==x] })
file_chunk
file_chunk
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.csv(paste0(PATH,x),header = F,row.names = 1)[,1],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.csv(paste0(PATH,x),header = F,row.names = 1)[,1],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
plan(multiprocess, workers=(availableCores()-1) )
PATH <- "~/Downloads/Marrow/"
#######
# Parallelization for reading input files from a folder and creating a count matrix
#######
files <- list.files(PATH)
genes <- rownames(read.csv(paste0(PATH,files[1]),header = F,row.names = 1))
file_chunk <- cut(as.numeric(factor(files)),breaks = 7)
file_chunk <- lapply( levels(file_chunk) , function(x){ files[file_chunk==x] })
f <- list()
for(ind in 1:length(file_chunk) ){
f[[ ind ]] <- future({
rrr <- lapply(file_chunk[[ind]],function(x){
return(Matrix::Matrix(read.csv(paste0(PATH,x),header = F,row.names = 1)[,1],sparse = T))})
rrr <- do.call(cbind,rrr)
colnames(rrr) <- sub("[.]merge.*","",file_chunk[[ind]])
return(rrr)
})
}
metadata_all <- lapply(f, FUN = value)
metadata_all <- do.call(cbind,metadata_all)
dim(metadata_all)
rownames(metadata_all) <- genes
# data <- read.csv("~/Downloads/Marrow.h5",row.names = 1)
# data <- Matrix::Matrix(as.matrix(data), sparse = T)
data <- metadata_all
h5createFile("~/Downloads/Marrow.h5")
h5createGroup("~/Downloads/Marrow.h5","matrix")
h5write(data@Dimnames[[2]],"~/Downloads/Marrow.h5","matrix/barcodes")
h5write(data@x,"~/Downloads/Marrow.h5","matrix/data")
h5write(data@i,"~/Downloads/Marrow.h5","matrix/indices")
h5write(data@p,"~/Downloads/Marrow.h5","matrix/indptr")
h5write(data@Dim,"~/Downloads/Marrow.h5","matrix/shape")
h5createGroup("~/Downloads/Marrow.h5","matrix/features")
h5write(data@Dimnames[[1]]
,"~/Downloads/Marrow.h5","matrix/features/name")
h5write(data@Dimnames[[1]]
,"~/Downloads/Marrow.h5","matrix/features/_all_tag_keys")
h5write(rep("expression",nrow(data))
,"~/Downloads/Marrow.h5","matrix/features/feature_type")
h5write(rep("mm10",nrow(data))
,"~/Downloads/Marrow.h5","matrix/features/genome")
h5ls("~/Downloads/Marrow.h5")
nd <- Seurat::Read10X_h5("~/Downloads/Marrow.h5")
sum(!nd == data)
